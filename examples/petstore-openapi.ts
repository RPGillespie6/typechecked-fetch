// Code generated by typed-fetch. DO NOT EDIT.
// https://github.com/RPGillespie6/typed-fetch

// URL types
type UrlDeletePetPetId = '/pet/{petId}';
type UrlDeleteStoreOrderOrderId = '/store/order/{orderId}';
type UrlDeleteUserUsername = '/user/{username}';
type UrlValidDelete = UrlDeletePetPetId | UrlDeleteStoreOrderOrderId | UrlDeleteUserUsername;

type UrlGetPetFindByStatus = '/pet/findByStatus';
type UrlGetPetFindByTags = '/pet/findByTags';
type UrlGetPetPetId = '/pet/{petId}';
type UrlGetStoreInventory = '/store/inventory';
type UrlGetStoreOrderOrderId = '/store/order/{orderId}';
type UrlGetUserLogin = '/user/login';
type UrlGetUserLogout = '/user/logout';
type UrlGetUserUsername = '/user/{username}';
type UrlValidGet = UrlGetPetFindByStatus | UrlGetPetFindByTags | UrlGetPetPetId | UrlGetStoreInventory | UrlGetStoreOrderOrderId | UrlGetUserLogin | UrlGetUserLogout | UrlGetUserUsername;

type UrlPostPet = '/pet';
type UrlPostPetPetId = '/pet/{petId}';
type UrlPostPetPetIdUploadImage = '/pet/{petId}/uploadImage';
type UrlPostStoreOrder = '/store/order';
type UrlPostUser = '/user';
type UrlPostUserCreateWithList = '/user/createWithList';
type UrlValidPost = UrlPostPet | UrlPostPetPetId | UrlPostPetPetIdUploadImage | UrlPostStoreOrder | UrlPostUser | UrlPostUserCreateWithList;

type UrlPutPet = '/pet';
type UrlPutUserUsername = '/user/{username}';
type UrlValidPut = UrlPutPet | UrlPutUserUsername;

// Component types

type ComponentSchemaAddress = {
    /** Example: Palo Alto */
    city?: string;
    /** Example: CA */
    state?: string;
    /** Example: 437 Lytton */
    street?: string;
    /** Example: 94301 */
    zip?: string;
}

type ComponentSchemaApiResponse = {
    code?: number;
    message?: string;
    type?: string;
}

type ComponentSchemaCategory = {
    id?: number;
    /** Example: Dogs */
    name?: string;
}

type ComponentSchemaCustomer = {
    address?: ComponentSchemaAddress[];
    id?: number;
    /** Example: fehguy */
    username?: string;
}

type ComponentSchemaOrder = {
    complete?: boolean;
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: string;
    /** Order Status; Example: approved */
    status?: 'placed' | 'approved' | 'delivered';
}

type ComponentSchemaPet = {
    category?: ComponentSchemaCategory;
    id?: number;
    /** Example: doggie */
    name: string;
    photoUrls: string[];
    /** pet status in the store */
    status?: 'available' | 'pending' | 'sold';
    tags?: ComponentSchemaTag[];
}

type ComponentSchemaTag = {
    id?: number;
    name?: string;
}

type ComponentSchemaUser = {
    /** Example: john@email.com */
    email?: string;
    /** Example: John */
    firstName?: string;
    id?: number;
    /** Example: James */
    lastName?: string;
    /** Example: 12345 */
    password?: string;
    /** Example: 12345 */
    phone?: string;
    /** User Status */
    userStatus?: number;
    /** Example: theUser */
    username?: string;
}

// Request types

// PUT /pet
type BodyPutPet = ComponentSchemaPet;
type RequestPutPet = Omit<RequestInit, 'body'> & {  body: BodyPutPet; };

// POST /pet
type BodyPostPet = ComponentSchemaPet;
type RequestPostPet = Omit<RequestInit, 'body'> & {  body: BodyPostPet; };

// GET /pet/findByStatus
type ParamGetPetFindByStatus = {
    query?: {
        status?: 'available' | 'pending' | 'sold';
    };
}
type RequestGetPetFindByStatus = RequestInit & { params?: ParamGetPetFindByStatus;  };

// GET /pet/findByTags
type ParamGetPetFindByTags = {
    query?: {
        tags?: string[];
    };
}
type RequestGetPetFindByTags = RequestInit & { params?: ParamGetPetFindByTags;  };

// GET /pet/{petId}
type ParamGetPetPetId = {
    path: {
        petId: number;
    };
}
type RequestGetPetPetId = RequestInit & { params: ParamGetPetPetId;  };

// POST /pet/{petId}
type ParamPostPetPetId = {
    path: {
        petId: number;
    };
    query?: {
        name?: string;
        status?: string;
    };
}
type RequestPostPetPetId = RequestInit & { params: ParamPostPetPetId;  };

// DELETE /pet/{petId}
type ParamDeletePetPetId = {
    header?: {
        api_key?: string;
    };
    path: {
        petId: number;
    };
}
type RequestDeletePetPetId = RequestInit & { params: ParamDeletePetPetId;  };

// POST /pet/{petId}/uploadImage
type ParamPostPetPetIdUploadImage = {
    path: {
        petId: number;
    };
    query?: {
        additionalMetadata?: string;
    };
}
type BodyPostPetPetIdUploadImage = string;
type RequestPostPetPetIdUploadImage = Omit<RequestInit, 'body'> & { params: ParamPostPetPetIdUploadImage; body?: BodyPostPetPetIdUploadImage; };

// GET /store/inventory
type RequestGetStoreInventory = RequestInit;

// POST /store/order
type BodyPostStoreOrder = ComponentSchemaOrder;
type RequestPostStoreOrder = Omit<RequestInit, 'body'> & {  body?: BodyPostStoreOrder; };

// GET /store/order/{orderId}
type ParamGetStoreOrderOrderId = {
    path: {
        orderId: number;
    };
}
type RequestGetStoreOrderOrderId = RequestInit & { params: ParamGetStoreOrderOrderId;  };

// DELETE /store/order/{orderId}
type ParamDeleteStoreOrderOrderId = {
    path: {
        orderId: number;
    };
}
type RequestDeleteStoreOrderOrderId = RequestInit & { params: ParamDeleteStoreOrderOrderId;  };

// POST /user
type BodyPostUser = ComponentSchemaUser;
type RequestPostUser = Omit<RequestInit, 'body'> & {  body?: BodyPostUser; };

// POST /user/createWithList
type BodyPostUserCreateWithList = ComponentSchemaUser[];
type RequestPostUserCreateWithList = Omit<RequestInit, 'body'> & {  body?: BodyPostUserCreateWithList; };

// GET /user/login
type ParamGetUserLogin = {
    query?: {
        username?: string;
        password?: string;
    };
}
type RequestGetUserLogin = RequestInit & { params?: ParamGetUserLogin;  };

// GET /user/logout
type RequestGetUserLogout = RequestInit;

// GET /user/{username}
type ParamGetUserUsername = {
    path: {
        username: string;
    };
}
type RequestGetUserUsername = RequestInit & { params: ParamGetUserUsername;  };

// PUT /user/{username}
type ParamPutUserUsername = {
    path: {
        username: string;
    };
}
type BodyPutUserUsername = ComponentSchemaUser;
type RequestPutUserUsername = Omit<RequestInit, 'body'> & { params: ParamPutUserUsername; body?: BodyPutUserUsername; };

// DELETE /user/{username}
type ParamDeleteUserUsername = {
    path: {
        username: string;
    };
}
type RequestDeleteUserUsername = RequestInit & { params: ParamDeleteUserUsername;  };

type DataResponse<D> = { data: D; response: Response; };
type ErrorResponse<E> = { error: E; response: Response; };
type FetchResponse<D, E> = DataResponse<D> | ErrorResponse<E>;

interface ClientOptions extends RequestInit {
    baseUrl?: string;
    
	// Override fetch function (useful for testing)
	fetch?: (input: Request) => Promise<Response>;
	
	// global body serializer -- allows you to customize how the body is serialized before sending
	// normally not needed unless you are using something like XML instead of JSON
    bodySerializer?: (body: any) => BodyInit | null; 
    
	// global query serializer -- allows you to customize how the query is serialized before sending
	// normally not needed unless you are using some custom array serialization like {foo: [1,2,3,4]} => ?foo=1;2;3;4
	querySerializer?: (query: any) => string;
}

interface Client {
    // GET(url: string, init?: RequestInit): Promise<FetchResponse<Foo, Err>>;
	// POST(url: string, init?: BarRequestInit): Promise<FetchResponse<Bar, Err>>;
}

// Client Implementation

// If not specified, default to application/json
// Used to deduce body serializer and to set content-type header
const contentTypeMap: Record<string, string> = {
	// "/some/binary/url": "application/octet-stream",
}

class ClientImpl {
    options: ClientOptions;

    constructor(options: ClientOptions) {
        options.baseUrl = options.baseUrl || ""; // Make sure baseUrl is always a string
        this.options = options;
    }

    #fetch(input: Request): Promise<Response> {
        return (this.options.fetch || fetch)(input);
    }
}

export function createClient(options: ClientOptions): Client {
    return new ClientImpl(options);
}